from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import sqlite3
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.methods.delete_message import DeleteMessage

from main import updating_db


router = Router()

class Ask_Offers(StatesGroup):
    name = State()
    questions = State()


class Ask_Errors(StatesGroup):
    name = State()
    questions = State()


@router.message(CommandStart())
async def start(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n‚ñé –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –≤–∞–ª—é—Ç Currency bot\n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≤–∞–ª—é—Ç! üåç\n\n–Ø —Å–æ–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–Ω–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n‚ñé –ë–∞–Ω–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ\n\n1. –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫\n2. –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫\n3. –ë–ª–∞–≥—Ä–æ–ø—Ä–æ–º–±–∞–Ω–∫\n4. –ë–µ–ª–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫\n5. –ü—Ä–∏–æ—Ä–±–∞–Ω–∫\n\n‚ñé –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å? \n\n- –£–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. \n- –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–Ω–∫–æ–≤.\n- –°—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–µ–µ. \n\n‚ñé –£–º–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ /help.\n\n–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è, –∏ –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π! üí± \n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è!')


@router.message(Command('banks'))
async def cmd_start(message : Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤. üí≥\n\n–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ—è–≤–∏—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –±–∞–Ω–∫, –∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üè¶', reply_markup=kb.main)# —Å–¥–µ–ª–∞–Ω –≤—ã–≤–æ–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏

@router.message(F.text == '–í—ã–≤–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞')
async def one_banks(message : Message):
    await message.answer('‚ñé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –≤–∞–ª—é—Ç—ã\n\n‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.\n\nüìä –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!', reply_markup= kb.ask_bank)#.adjust(2))#.as_markup())


@router.callback_query(F.data == 'alpha_bank')
async def al_bank(callback: CallbackQuery):
    await callback.answer('–ü—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == 1").fetchone()
    await callback.message.edit_text('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n',
                            reply_markup=kb.ask_bank)

    conn.commit()
    conn.close()

@router.callback_query(F.data == 'belarusbank')
async def al_bank(callback: CallbackQuery):
    await callback.answer('–ü—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == 3").fetchone()
    await callback.message.edit_text('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n',
                            reply_markup=kb.ask_bank)

    conn.commit()
    conn.close()

@router.callback_query(F.data == 'belaroproprombank')
async def al_bank(callback: CallbackQuery):
    await callback.answer('–ü—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == 2").fetchone()
    await callback.message.edit_text('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n',
                            reply_markup=kb.ask_bank)

    conn.commit()
    conn.close()

@router.callback_query(F.data == 'belgazprombank')
async def al_bank(callback: CallbackQuery):
    await callback.answer('–ü—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == 4").fetchone()
    await callback.message.edit_text('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n',
                            reply_markup=kb.ask_bank)

    conn.commit()
    conn.close()

@router.callback_query(F.data == 'priorbank')
async def al_bank(callback: CallbackQuery):
    await callback.answer('–ü—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == 5").fetchone()
    await callback.message.edit_text('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n',
                            reply_markup=kb.ask_bank)

    conn.commit()
    conn.close()


@router.callback_query(F.data == '_to_main')
async def to_main(callback: CallbackQuery):
    await callback.message.edit_text('‚ñé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –≤–∞–ª—é—Ç—ã\n\n‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.\n\nüìä –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!', reply_markup=kb.ask_bank)


@router.message(F.text == '–í—ã–≤–æ–¥ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤')
async def all_banks(message : Message):
    await message.answer('–ò–¥–µ—Ç —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å...')
    updating_db()
    conn = sqlite3.connect("myfin.db")
    cursor = conn.cursor()
    for a in range(1, 6):
        banks = cursor.execute("SELECT name, usd_sale, usd_buy, eur_sale, eur_buy, rub_sale, rub_buy FROM banks WHERE id == ?", (a,)).fetchone()
        await message.answer('üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç '+ str(banks[0]) +'–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:' +
                            '\n\nüîπ –°–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[1]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä: ' + str(banks[2]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å –µ–≤—Ä–æ: ' + str(banks[3]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å –µ–≤—Ä–æ: ' + str(banks[4]) + '‚ÇΩ' +
                            '\nüîπ –°–¥–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[5]) + '‚ÇΩ' + '\nüî∏ –ö—É–ø–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: ' + str(banks[6]) + '‚ÇΩ' + '\n')
    conn.commit()
    conn.close()


@router.message(Command('help'))
async def ask(message : Message):
    await message.answer('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n‚ñé –ö–æ–º–∞–Ω–¥–∞ /start\n–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è. üéâ \n\n‚ñé –ö–æ–º–∞–Ω–¥–∞ /banks\n–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å –æ–ø—Ü–∏—è–º–∏. –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤. üìã \n\n‚ñé –ö–æ–º–∞–Ω–¥–∞ /help\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ –∏ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! ‚ùì\n\n‚ñé –ö–æ–º–∞–Ω–¥–∞ /offer \n–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã. üí°\n\n‚ñé –ö–æ–º–∞–Ω–¥–∞ /error\n–°–ª—É–∂–∏—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö. –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º. üö®')


@router.message(Command('offer'))
async def step_f(message : Message, state : FSMContext):
    await state.set_state(Ask_Offers.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')


@router.message(Ask_Offers.name)
async def step_f(message : Message, state : FSMContext):
    await state.update_data(name = message.text)
    await state.set_state(Ask_Offers.questions)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.')


@router.message(Ask_Offers.questions)
async def step_f(message : Message, state : FSMContext):
    await state.update_data(questions = message.text)
    data = await state.get_data()
    await message.answer(f'‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚ú®\n\nüë§ –í–∞—à–µ –∏–º—è: {data['name']}.\nüí° –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {data['questions']}.')
    connection = sqlite3.connect('offer.db')
    cursor = connection.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_offer(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            offers TEXT
        )
    """)
    cursor.execute("INSERT INTO users_offer (name, offers) VALUES (?, ?)", (data['name'], data['questions'],),)
    connection.commit()
    connection.close()
    await state.clear()


@router.message(Command('error'))
async def step_f(message : Message, state : FSMContext):
    await state.set_state(Ask_Errors.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')


@router.message(Ask_Errors.name)
async def step_f(message : Message, state : FSMContext):
    await state.update_data(name = message.text)
    await state.set_state(Ask_Errors.questions)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.')


@router.message(Ask_Errors.questions)
async def step_f(message : Message, state : FSMContext):
    await state.update_data(questions = message.text)
    data = await state.get_data()
    await message.answer(f'‚ö†Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚ö†Ô∏è\n\nüë§ –í–∞—à–µ –∏–º—è: {data['name']}.\n‚ùå –í–∞—à–∞ –æ—à–∏–±–∫–∞: {data['questions']}.')
    connection = sqlite3.connect('error.db')
    cursor = connection.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_error(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            errors TEXT
        )
    """)
    cursor.execute("INSERT INTO users_error (name, errors) VALUES (?, ?)", (data['name'], data['questions'],),)
    connection.commit()
    connection.close()
    await state.clear()